include config.make
TRSDK_DAEMON_CONFIG=$(CONFIG_TRSDK_ROOT)/config.conf
UUID=743128bf-3bf3-45b5-ab14-4602c67f2950
all: .is_setup
clean:
	rm -f .is_setup $(TRSDK_DAEMON_CONFIG)
	rm -fr $(CONFIG_TRSDK_ROOT)
	cd js && make clean
	cd python && make clean
	cd java && make clean
	rm -f  config.make
# transfer SDK is installed
.is_setup: $(CONFIG_TRSDK_DIR_ARCH)/asperatransferd $(TRSDK_DAEMON_CONFIG) $(CONFIG_SDK_ROOT)/aspera_ssh_bypass_rsa.pem
	touch $@
# detect os and architecture to get right binary
# 	echo "CONFIG_TRSDK_ARCH=$$(sed -n 's/^  arch: *//p' < config.yaml)" >> config.make
config.make: config.yaml
	echo "# Generated by makefile, do not edit" > config.make
	echo "CONFIG_YAML=$$(pwd)/config.yaml" >> config.make
	echo "CONFIG_SDK_ROOT=$$(pwd)/sdk" >> config.make
	echo 'CONFIG_TRSDK_ROOT=$$(CONFIG_SDK_ROOT)/trsdk' >> config.make
	case $$(uname -s)-$$(uname -m) in\
	  Darwin-x86_64) arch=osx-x86_64;;\
	  Linux-x86_64) arch=todo;;\
	  *) echo "Error: $$(uname -s)-$$(iname -m)";exit 1;;\
	esac; echo "CONFIG_TRSDK_ARCH=$$arch" >> config.make
	echo 'CONFIG_TRSDK_DIR_ARCH=$$(CONFIG_TRSDK_ROOT)/$$(CONFIG_TRSDK_ARCH)' >> config.make
	echo 'CONFIG_TRSDK_DIR_GENERIC=$$(CONFIG_TRSDK_ROOT)/noarch' >> config.make
	echo 'CONFIG_FSMGR_DIR=$$(CONFIG_SDK_ROOT)/fspmgr' >> config.make
# start transfer SDK daemon
startdaemon: $(TRSDK_DAEMON_CONFIG)
	$(CONFIG_TRSDK_DIR_ARCH)/asperatransferd -c $(TRSDK_DAEMON_CONFIG)
stopdaemon:
	-killall asperatransferd
# generate transfer SDK config file
$(TRSDK_DAEMON_CONFIG): config.yaml
	echo '{address: "'$$(sed -n 's|.*trsdk_url.*//\([^:]*\):.*|\1|p' < config.yaml)'",port: '$$(sed -n 's|.*trsdk_url.*:\([0-9]*\).*|\1|p' < config.yaml)',fasp_runtime: {use_embedded: false, user_defined: {bin: "'$(CONFIG_TRSDK_DIR_ARCH)'",etc: "'$(CONFIG_TRSDK_DIR_GENERIC)'"}}}' > $@
# unlocked bypass key
$(CONFIG_SDK_ROOT)/aspera_ssh_bypass_rsa.pem: $(CONFIG_TRSDK_DIR_ARCH)/asperatransferd
	openssl rsa -passin pass:$(UUID) -in $(CONFIG_TRSDK_DIR_GENERIC)/aspera_tokenauth_id_rsa -out $(CONFIG_SDK_ROOT)/aspera_ssh_bypass_rsa.pem
# download transfer SDK
$(CONFIG_TRSDK_ROOT)/transfer_sdk.zip:
	mkdir -p $(CONFIG_TRSDK_ROOT)
	curl -L https://ibm.biz/aspera_transfer_sdk -o $(CONFIG_TRSDK_ROOT)/transfer_sdk.zip
# extract transfer SDK
$(CONFIG_TRSDK_DIR_ARCH)/asperatransferd: $(CONFIG_TRSDK_ROOT)/transfer_sdk.zip
	@echo $(CONFIG_TRSDK_DIR_ARCH)
	unzip -d $(CONFIG_TRSDK_ROOT) $(CONFIG_TRSDK_ROOT)/transfer_sdk.zip
	rm -f $(CONFIG_TRSDK_DIR_ARCH)/ascp4
	cp $(CONFIG_TRSDK_DIR_ARCH)/ascp $(CONFIG_TRSDK_DIR_ARCH)/ascp4
	echo '<product><name>IBM Aspera SDK</name><version>1.1.1.52</version></product>' > $(CONFIG_TRSDK_DIR_ARCH)/product-info.mf
	cp $(CONFIG_TRSDK_DIR_GENERIC)/aspera-license $(CONFIG_TRSDK_DIR_ARCH)
	touch $@
# create template from actual private config file
template: config.yaml
	sed 's/^\(    [^:]*:\).*/\1 your_value_here/' < config.yaml > config.tmpl
config.yaml:
	@echo "Create a file: $@ from config.tmpl, see manual"
	@exit 1
